@{
    ViewData["Title"] = "کاربران";
}

<style>
    .btn-circle {
        width: 40px;
        height: 40px;
        padding: 6px 0px;
        border-radius: 50%;
        text-align: center;
        font-size: 12px;
        line-height: 1.42857;
    }
</style>

<div class="page-heading">
    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                <h3>کاربران</h3>
                <p class="text-subtitle text-muted">خوش آمدید</p>
            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
            </div>
        </div>
    </div>
    <div class="card shadow">
        <div class="card-header pb-0">
            <div class="row">
                <form class="col-sm-12">
                    <div id="advancedSearch" class="row">
                    </div>
                    <button type="button" onclick="search()" class="btn-circle btn btn-primary mb-2"
                            data-toggle="tooltip" data-placement="top" title="جستجو">
                        <i class="fe fe-24 fe-search"></i>
                    </button>
                    <button type="button" onclick="generateFilter()" class="btn-circle btn btn-warning mb-2"
                            data-toggle="tooltip" data-placement="top" title="افزودن فیلتر">
                        <i class="fe fe-24 fe-plus-circle"></i>
                    </button>
                </form>
            </div>
        </div>
        <div class="card-body">
            <div class="col-sm-12" style="background-color: #1b68ff;">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title pt-3 text-white">لیست کاربران</h5>
                    <div>
                        <button id="editButton" hidden="true" type="button" class="btn btn-primary position-relative ml-1"
                                data-toggle="tooltip" data-placement="top" title="ویرایش">
                            <i class="fe fe-24 fe-edit-2"></i>
                            <span style="font-size: 100%;" id="editBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success">
                                0
                            </span>
                        </button>

                        <button id="deleteButton" hidden="true" type="button" class="btn btn-primary position-relative" onclick="deleteEvent()"
                                data-toggle="tooltip" data-placement="top" title="حذف">
                            <i class="fe fe-24 fe-trash-2" aria-hidden="true"></i>
                            <span style="font-size: 100%;" id="deleteBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                0
                            </span>
                        </button>
                    </div>
                </div>
            </div>
            <div class="ag-theme-alpine col-sm-12 p-0" id="myGrid" style="height: 40vh;"></div>
            <br>
            <div class="row justify-content-between">
                <div class="col-sm-6">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination" style="padding-right: 0;">
                            <li id="previous" class="page-item" onclick="onPageClick('previous')">
                                <button class="page-link" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </button>
                            </li>

                            <li id="next" class="page-item">
                                <button class="page-link" aria-label="Next" onclick="onPageClick('next')">
                                    <span aria-hidden="true">&raquo;</span>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
                <div class="col-sm-1">
                    <select onchange="search()" name="takeEntity" class="form-control">
                        <option value="5">5</option>
                        <option selected value="10">10</option>
                        <option value="20">20</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>
<span class="AntiForge"> @Html.AntiForgeryToken() </span>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function() {
            $("#deleteButton").hide();
            $("#editButton").hide();
            $('#deleteButton').removeAttr('hidden');
            $('#editButton').removeAttr('hidden');

            generateFilter();

            var data = {
                filters: GetFilterData(),
                sortOrder: sortOrder,
                takeEntity: $('select[name="takeEntity"]').val()
            };
            fetchDataFromServer(data);
        });

        var sortOrder = [{keyName: "", keySort: ""}];
        var filterIndex = 0;
        var selectedIds = [];
        var activePage = 1;

        var filterOperators = [
            {
                name: "شامل میشود",
                value: "=*"
            },
            {
                name: "شامل نمیشود",
                value: "!*"
            },
            {
                name: "برابر با",
                value: "="
            },
            {
                name: "نابرابر با",
                value: "!*"
            },
            {
                name: "بزرگتر از",
                value: ">"
            },
            {
                name: "کوچکتر از",
                value: "<"
            }
        ];
        var filters = [
            {
                name: "firstName",
                label: "نام",
                type: "text",
                value: ""
            },
            {
                name: "lastName",
                label: "نام خانوادگی",
                type: "text",
                value: ""
            },
            {
                name: "MobileNumber",
                label: "شماره تلفن",
                type: "number",
                value: ""
            },
            {
                name: "email",
                label: "ایمیل",
                type: "list",
                value: "",
                dataSourceUrl: 'https://@Context.Request.Host/Admin/User/Test1'
            }
        ];

        function generateFilter() {
            var result = '';
            var keyNameOptions = '';
            var keyOperatorOptions = '';

            for (var i = 0; i < filters.length; i++) {
                keyNameOptions += '<option ' +
                    'value="' +
                    filters[i].name +
                    '">' +
                    filters[i].label +
                    '</option>';

                keyOperatorOptions += '<option ' +
                    'value="' +
                    filterOperators[i].value +
                    '">' +
                    filterOperators[i].name +
                    '</option>';
            }
            result += '<div class="col-sm-2 mb-2">' +
                '<select id="' +
                filterIndex +
                '" name="keyName" class="form-control" onchange="onKeyNameChange(this)">' +
                keyNameOptions +
                '</select>' +
                '</div>';

            result += '<div class="col-sm-2 mb-2">' +
                '<select id="operator' +
                filterIndex +
                '" name="keyOperator" class="form-control ">' +
                keyOperatorOptions +
                '</select>' +
                '</div>';

            result += '<div class="col-sm-2 mb-2">' +
                '<input id="value' +
                filterIndex +
                '" name="keyValue" type="text" class="form-control">' +
                '</div>';
            filterIndex++;
            $(result).appendTo('#advancedSearch');
        }

        function onKeyNameChange(input) {
            var selectedKeyName = input.value;

            var selectedFilterType = filters.find(x => x.name === selectedKeyName).type;
            var operatorId = "operator" + input.id;
            var $el = $("#" + operatorId);
            $el.empty();

            var $inputValue = $("#" + "value" + input.id);

            const textTypeOperators = [
                {
                    name: "شامل میشود",
                    value: "=*"
                },
                {
                    name: "شامل نمیشود",
                    value: "!*"
                },
                {
                    name: "برابر با",
                    value: "="
                },
                {
                    name: "نابرابر با",
                    value: "!*"
                }
            ];

            const numberTypeOperators = [
                {
                    name: "برابر با",
                    value: "="
                },
                {
                    name: "نابرابر با",
                    value: "!*"
                },
                {
                    name: "بزرگتر از",
                    value: ">"
                },
                {
                    name: "کوچکتر از",
                    value: "<"
                }
            ];

            const listTypeOperators = [
                {
                    name: "شامل میشود",
                    value: "=*"
                },
                {
                    name: "شامل نمیشود",
                    value: "!*"
                }
            ];

            if (selectedFilterType === "text") {
                $.each(textTypeOperators,
                    function(key, value) {
                        $el.append($("<option></option>")
                            .attr("value", value.value).text(textTypeOperators[key].name));
                    });
                $inputValue.attr('type', 'text');
            } else if (selectedFilterType === "number") {
                $.each(numberTypeOperators,
                    function(key, value) {
                        $el.append($("<option></option>")
                            .attr("value", value.value).text(numberTypeOperators[key].name));
                    });
                $inputValue.attr('type', 'number');
            } else if (selectedFilterType === "list") {
                $.each(listTypeOperators,
                    function(key, value) {
                        $el.append($("<option></option>")
                            .attr("value", value.value).text(listTypeOperators[key].name));
                    });

                var select = '';
                select =
                    '<select id="value' + input.id + '" class="js-example-basic-single col-sm-12" name="keyValue" multiple="multiple">'

                    + '</select>';

                $inputValue.replaceWith(select);

                var selectedFilterDataSourceUrl = filters.find(x => x.name === selectedKeyName).dataSourceUrl;

                $('.js-example-basic-single').select2({
                    ajax: {
                        headers: {
                            RequestVerificationToken: $(".AntiForge" + " input").val()
                        },
                        type: "POST",
                        dataType: "json",
                        url: selectedFilterDataSourceUrl,
                        contentType: "application/json",
                        data: JSON.stringify('ss'),
                        processResults: function(data) {
                            return {
                                results: data
                            };
                        }
                    }
                });
            };
        }

        function GetFilterData() {
            var formResult = $('form').serializeArray();
            var keyNames = [];
            var keyOperators = [];

            keyNames = formResult.filter(form => form.name === "keyName")
                .map(form => form.value);
            keyOperators = formResult.filter(form => form.name === "keyOperator")
                .map(form => form.value);

            var finalData = [];

            for (var j = 0; j < keyNames.length; j++) {
                finalData.push(
                    {
                        keyName: keyNames[j],
                        keyOperator: keyOperators[j],
                        keyType: filters.filter(item => item.name === keyNames[j])[0].type,
                        keyValue: Array.isArray($("#" + "value" + j).val()) 
                            ? $("#" + "value" + j).val()
                            : [$("#" + "value" + j).val()]
                    });
            }
            return finalData;
        }

        function refresh() {
            $('form').trigger('reset');
            $('select[name="sortOrder"]').prop('selectedIndex', 0);
            $('select[name="takeEntity"]').prop('selectedIndex', 1);

            var data = {
                filters: GetFilterData(),
                sortOrder: sortOrder,
                takeEntity: $('select[name="takeEntity"]').val()
            };
            fetchDataFromServer(data);
        }

        function onPageClick(input) {
            var pageId;

            if (input === "next") {
                pageId = activePage + 1;
            } else if (input === "previous") {
                pageId = activePage - 1;
            } else {
                pageId = input;
            }

            var data = {
                filters: GetFilterData(),
                sortOrder: sortOrder,
                takeEntity: $('select[name="takeEntity"]').val(),
                pageId: pageId
            };
            fetchDataFromServer(data);
        }

        function search() {
            var data = {
                filters: GetFilterData(),
                sortOrder: sortOrder,
                takeEntity: $('select[name="takeEntity"]').val()
            };
            fetchDataFromServer(data);
        }

        function deleteEvent() {
            var swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-success m-1',
                    cancelButton: 'btn btn-danger m-1'
                },
                buttonsStyling: false
            });
            swalWithBootstrapButtons.fire({
                title: 'آیا میخواهید کاربر را حذف کنید؟',
                text: "این عملیات غیر قابل بازگشت است!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'حذف کاربر',
                cancelButtonText: 'انصراف',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        headers: {
                            RequestVerificationToken: $(".AntiForge" + " input").val()
                        },
                        type: 'POST',
                        url: 'https://@Context.Request.Host/Admin/User/Delete',
                        data: JSON.stringify(selectedIds),
                        dataType: "json",
                        contentType: "application/json",
                        success: function(result) {
                            if (result.response === 0) {
                                Toastify({
                                    text: result.message,
                                    duration: 5000,
                                    close: true,
                                    gravity: "top",
                                    position: "center",
                                    backgroundColor: "#4fbe87"
                                }).showToast();
                            }
                            if (result.response === 1) {
                                Toastify({
                                    text: result.message,
                                    duration: 5000,
                                    close: true,
                                    gravity: "top",
                                    position: "center",
                                    backgroundColor: "#eb811e"
                                }).showToast();
                            }
                            if (result.response === 2) {
                                Toastify({
                                    text: result.message,
                                    duration: 5000,
                                    close: true,
                                    gravity: "top",
                                    position: "center",
                                    backgroundColor: "#f0210e"
                                }).showToast();
                            }
                        },
                        error: function() {
                            Swal.fire({
                                icon: 'error',
                                title: 'سمت سرور خطا رخ داده است',
                                confirmButtonText: 'تایید',
                                timer: 3000
                            });
                        }
                    });
                }
            });
            return false;
        }

        // Grid Options
        const columnDefs = [
            {
                headerName: 'ردیف',
                field: "row",
                width: 120,
                checkboxSelection: true,
                headerCheckboxSelection: true
            },
            {
                headerName: 'نام',
                field: "firstName",
                width: 150
            },
            {
                headerName: 'نام خانوادگی',
                field: "lastName",
                width: 250
            },
            {
                headerName: 'شماره تلفن',
                field: "mobileNumber",
                width: 150
            },
            {
                headerName: 'ایمیل',
                field: "email",
                width: 150
            }
        ];

        const gridOptions = {
            rowSelection: 'multiple',
            defaultColDef: {
                resizable: true,
                sortable: true,
                filter: true
            },
            columnDefs: columnDefs,
            enableRtl: true,
            animateRows: true,
            onSortChanged() {
                var colState = gridOptions.columnApi.getColumnState();
                var sortState = colState
                    .filter(function (s) {
                        return s.sort != null;
                    })
                    .map(function (s) {
                        return { keyName: s.colId, keySort: s.sort };
                    });
                sortOrder = sortState;
                search();
            },
            onSelectionChanged(event) {
                selectedIds = event.api.getSelectedRows().map(row => row.id);
                if (selectedIds.length > 0) {
                    $("#deleteButton").fadeIn(300);
                    if (selectedIds.length === 1) {
                        $("#editButton").fadeIn(300);
                    } else {
                        $("#editButton").fadeOut(300);
                    }
                } else {
                    $("#deleteButton").fadeOut(300);
                    $("#editButton").fadeOut(300);
                }
                $('#deleteBadge').text(selectedIds.length);
                $('#editBadge').text(selectedIds.length);
            }
        };
        const eGridDiv = document.getElementById("myGrid");
        new agGrid.Grid(eGridDiv, gridOptions);

        function fetchDataFromServer(data) {
            $.ajax({
                headers: {
                    RequestVerificationToken: $(".AntiForge" + " input").val()
                },
                type: "POST",
                dataType: "json",
                url: 'https://@Context.Request.Host/Admin/User/GridAjax',
                contentType: "application/json",
                data: JSON.stringify(data),
                success: function(result) {
                    gridOptions.api.setRowData(result.records);
                    activePage = result.activePage;

                    if (result.activePage === 1) {
                        $('#previous').addClass('disabled');
                    } else {
                        $('#previous').removeClass('disabled');
                    }

                    if (result.activePage === result.endPage) {
                        $('#next').addClass('disabled');
                    } else {
                        $('#next').removeClass('disabled');
                    }

                    $('.pages').remove();
                    var pagination = '';
                    for (var i = result.startPage; i <= result.endPage; i++) {
                        if (i === result.activePage) {
                            pagination += '<li class="page-item pages active"><button class="page-link">' + i + '</button></li>';
                        } else {
                            pagination += '<li class="page-item pages"><button class="page-link" onclick="onPageClick(' + i + ')" >' + i + '</button></li>';
                        }
                    }
                    $('#previous').after(pagination);
                },
                error: function(e) {
                    console.log(e.responseText);
                }
            });
        }
    </script>
}